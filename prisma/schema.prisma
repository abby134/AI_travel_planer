// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  travelPlans TravelPlan[]
  accounts    Account[]
  sessions    Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TravelPlan {
  id          String   @id @default(cuid())
  userId      String
  destination String
  startDate   DateTime
  endDate     DateTime
  mode        TravelMode
  status      PlanStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  attractions Attraction[]
}

model Attraction {
  id           String @id @default(cuid())
  travelPlanId String
  name         String
  description  String?
  latitude     Float
  longitude    Float
  order        Int
  visitTime    String?
  duration     String?
  
  travelPlan TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)
}

enum TravelMode {
  COMMANDO
  NORMAL
  LEISURE
}

enum PlanStatus {
  DRAFT
  COMPLETED
  SHARED
}
